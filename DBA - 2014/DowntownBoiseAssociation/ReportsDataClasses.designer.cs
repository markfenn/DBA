#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DowntownBoiseAssociation
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ReportServer")]
	public partial class ReportsDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCatalog(Catalog instance);
    partial void UpdateCatalog(Catalog instance);
    partial void DeleteCatalog(Catalog instance);
    #endregion
		
		public ReportsDataClassesDataContext() : 
				base(global::DowntownBoiseAssociation.Properties.Settings.Default.ReportServerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ReportsDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ReportsDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ReportsDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ReportsDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Catalog> Catalogs
		{
			get
			{
				return this.GetTable<Catalog>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Catalog")]
	public partial class Catalog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ItemID;
		
		private string _Path;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _ParentID;
		
		private int _Type;
		
		private System.Data.Linq.Binary _Content;
		
		private System.Nullable<System.Guid> _Intermediate;
		
		private System.Nullable<System.Guid> _SnapshotDataID;
		
		private System.Nullable<System.Guid> _LinkSourceID;
		
		private string _Property;
		
		private string _Description;
		
		private System.Nullable<bool> _Hidden;
		
		private System.Guid _CreatedByID;
		
		private System.DateTime _CreationDate;
		
		private System.Guid _ModifiedByID;
		
		private System.DateTime _ModifiedDate;
		
		private string _MimeType;
		
		private System.Nullable<int> _SnapshotLimit;
		
		private string _Parameter;
		
		private System.Guid _PolicyID;
		
		private bool _PolicyRoot;
		
		private int _ExecutionFlag;
		
		private System.Nullable<System.DateTime> _ExecutionTime;
		
		private EntitySet<Catalog> _Catalogs;
		
		private EntitySet<Catalog> _Catalogs1;
		
		private EntityRef<Catalog> _Catalog1;
		
		private EntityRef<Catalog> _Catalog2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIDChanging(System.Guid value);
    partial void OnItemIDChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnContentChanging(System.Data.Linq.Binary value);
    partial void OnContentChanged();
    partial void OnIntermediateChanging(System.Nullable<System.Guid> value);
    partial void OnIntermediateChanged();
    partial void OnSnapshotDataIDChanging(System.Nullable<System.Guid> value);
    partial void OnSnapshotDataIDChanged();
    partial void OnLinkSourceIDChanging(System.Nullable<System.Guid> value);
    partial void OnLinkSourceIDChanged();
    partial void OnPropertyChanging(string value);
    partial void OnPropertyChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnHiddenChanging(System.Nullable<bool> value);
    partial void OnHiddenChanged();
    partial void OnCreatedByIDChanging(System.Guid value);
    partial void OnCreatedByIDChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnModifiedByIDChanging(System.Guid value);
    partial void OnModifiedByIDChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    partial void OnMimeTypeChanging(string value);
    partial void OnMimeTypeChanged();
    partial void OnSnapshotLimitChanging(System.Nullable<int> value);
    partial void OnSnapshotLimitChanged();
    partial void OnParameterChanging(string value);
    partial void OnParameterChanged();
    partial void OnPolicyIDChanging(System.Guid value);
    partial void OnPolicyIDChanged();
    partial void OnPolicyRootChanging(bool value);
    partial void OnPolicyRootChanged();
    partial void OnExecutionFlagChanging(int value);
    partial void OnExecutionFlagChanged();
    partial void OnExecutionTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnExecutionTimeChanged();
    #endregion
		
		public Catalog()
		{
			this._Catalogs = new EntitySet<Catalog>(new Action<Catalog>(this.attach_Catalogs), new Action<Catalog>(this.detach_Catalogs));
			this._Catalogs1 = new EntitySet<Catalog>(new Action<Catalog>(this.attach_Catalogs1), new Action<Catalog>(this.detach_Catalogs1));
			this._Catalog1 = default(EntityRef<Catalog>);
			this._Catalog2 = default(EntityRef<Catalog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(425) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(425) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Catalog2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Intermediate", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Intermediate
		{
			get
			{
				return this._Intermediate;
			}
			set
			{
				if ((this._Intermediate != value))
				{
					this.OnIntermediateChanging(value);
					this.SendPropertyChanging();
					this._Intermediate = value;
					this.SendPropertyChanged("Intermediate");
					this.OnIntermediateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SnapshotDataID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SnapshotDataID
		{
			get
			{
				return this._SnapshotDataID;
			}
			set
			{
				if ((this._SnapshotDataID != value))
				{
					this.OnSnapshotDataIDChanging(value);
					this.SendPropertyChanging();
					this._SnapshotDataID = value;
					this.SendPropertyChanged("SnapshotDataID");
					this.OnSnapshotDataIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkSourceID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LinkSourceID
		{
			get
			{
				return this._LinkSourceID;
			}
			set
			{
				if ((this._LinkSourceID != value))
				{
					if (this._Catalog1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkSourceIDChanging(value);
					this.SendPropertyChanging();
					this._LinkSourceID = value;
					this.SendPropertyChanged("LinkSourceID");
					this.OnLinkSourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Property", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Property
		{
			get
			{
				return this._Property;
			}
			set
			{
				if ((this._Property != value))
				{
					this.OnPropertyChanging(value);
					this.SendPropertyChanging();
					this._Property = value;
					this.SendPropertyChanged("Property");
					this.OnPropertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(512)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="Bit")]
		public System.Nullable<bool> Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged("Hidden");
					this.OnHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedByID
		{
			get
			{
				return this._CreatedByID;
			}
			set
			{
				if ((this._CreatedByID != value))
				{
					this.OnCreatedByIDChanging(value);
					this.SendPropertyChanging();
					this._CreatedByID = value;
					this.SendPropertyChanged("CreatedByID");
					this.OnCreatedByIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedByID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ModifiedByID
		{
			get
			{
				return this._ModifiedByID;
			}
			set
			{
				if ((this._ModifiedByID != value))
				{
					this.OnModifiedByIDChanging(value);
					this.SendPropertyChanging();
					this._ModifiedByID = value;
					this.SendPropertyChanged("ModifiedByID");
					this.OnModifiedByIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MimeType", DbType="NVarChar(260)")]
		public string MimeType
		{
			get
			{
				return this._MimeType;
			}
			set
			{
				if ((this._MimeType != value))
				{
					this.OnMimeTypeChanging(value);
					this.SendPropertyChanging();
					this._MimeType = value;
					this.SendPropertyChanged("MimeType");
					this.OnMimeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SnapshotLimit", DbType="Int")]
		public System.Nullable<int> SnapshotLimit
		{
			get
			{
				return this._SnapshotLimit;
			}
			set
			{
				if ((this._SnapshotLimit != value))
				{
					this.OnSnapshotLimitChanging(value);
					this.SendPropertyChanging();
					this._SnapshotLimit = value;
					this.SendPropertyChanged("SnapshotLimit");
					this.OnSnapshotLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parameter", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Parameter
		{
			get
			{
				return this._Parameter;
			}
			set
			{
				if ((this._Parameter != value))
				{
					this.OnParameterChanging(value);
					this.SendPropertyChanging();
					this._Parameter = value;
					this.SendPropertyChanged("Parameter");
					this.OnParameterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid PolicyID
		{
			get
			{
				return this._PolicyID;
			}
			set
			{
				if ((this._PolicyID != value))
				{
					this.OnPolicyIDChanging(value);
					this.SendPropertyChanging();
					this._PolicyID = value;
					this.SendPropertyChanged("PolicyID");
					this.OnPolicyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyRoot", DbType="Bit NOT NULL")]
		public bool PolicyRoot
		{
			get
			{
				return this._PolicyRoot;
			}
			set
			{
				if ((this._PolicyRoot != value))
				{
					this.OnPolicyRootChanging(value);
					this.SendPropertyChanging();
					this._PolicyRoot = value;
					this.SendPropertyChanged("PolicyRoot");
					this.OnPolicyRootChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionFlag", DbType="Int NOT NULL")]
		public int ExecutionFlag
		{
			get
			{
				return this._ExecutionFlag;
			}
			set
			{
				if ((this._ExecutionFlag != value))
				{
					this.OnExecutionFlagChanging(value);
					this.SendPropertyChanging();
					this._ExecutionFlag = value;
					this.SendPropertyChanged("ExecutionFlag");
					this.OnExecutionFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExecutionTime
		{
			get
			{
				return this._ExecutionTime;
			}
			set
			{
				if ((this._ExecutionTime != value))
				{
					this.OnExecutionTimeChanging(value);
					this.SendPropertyChanging();
					this._ExecutionTime = value;
					this.SendPropertyChanged("ExecutionTime");
					this.OnExecutionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catalog_Catalog", Storage="_Catalogs", ThisKey="ItemID", OtherKey="LinkSourceID")]
		public EntitySet<Catalog> Catalogs
		{
			get
			{
				return this._Catalogs;
			}
			set
			{
				this._Catalogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catalog_Catalog1", Storage="_Catalogs1", ThisKey="ItemID", OtherKey="ParentID")]
		public EntitySet<Catalog> Catalogs1
		{
			get
			{
				return this._Catalogs1;
			}
			set
			{
				this._Catalogs1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catalog_Catalog", Storage="_Catalog1", ThisKey="LinkSourceID", OtherKey="ItemID", IsForeignKey=true)]
		public Catalog Catalog1
		{
			get
			{
				return this._Catalog1.Entity;
			}
			set
			{
				Catalog previousValue = this._Catalog1.Entity;
				if (((previousValue != value) 
							|| (this._Catalog1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Catalog1.Entity = null;
						previousValue.Catalogs.Remove(this);
					}
					this._Catalog1.Entity = value;
					if ((value != null))
					{
						value.Catalogs.Add(this);
						this._LinkSourceID = value.ItemID;
					}
					else
					{
						this._LinkSourceID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Catalog1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Catalog_Catalog1", Storage="_Catalog2", ThisKey="ParentID", OtherKey="ItemID", IsForeignKey=true)]
		public Catalog Catalog2
		{
			get
			{
				return this._Catalog2.Entity;
			}
			set
			{
				Catalog previousValue = this._Catalog2.Entity;
				if (((previousValue != value) 
							|| (this._Catalog2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Catalog2.Entity = null;
						previousValue.Catalogs1.Remove(this);
					}
					this._Catalog2.Entity = value;
					if ((value != null))
					{
						value.Catalogs1.Add(this);
						this._ParentID = value.ItemID;
					}
					else
					{
						this._ParentID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Catalog2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Catalogs(Catalog entity)
		{
			this.SendPropertyChanging();
			entity.Catalog1 = this;
		}
		
		private void detach_Catalogs(Catalog entity)
		{
			this.SendPropertyChanging();
			entity.Catalog1 = null;
		}
		
		private void attach_Catalogs1(Catalog entity)
		{
			this.SendPropertyChanging();
			entity.Catalog2 = this;
		}
		
		private void detach_Catalogs1(Catalog entity)
		{
			this.SendPropertyChanging();
			entity.Catalog2 = null;
		}
	}
}
#pragma warning restore 1591
